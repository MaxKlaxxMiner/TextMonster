using System;

namespace TextMonster.Xml.Xml_Reader
{
  internal class XmlNumeric2Converter : XmlBaseConverter
  {
    protected XmlNumeric2Converter(XmlSchemaType schemaType)
      : base(schemaType)
    {
    }

    public static XmlValueConverter Create(XmlSchemaType schemaType)
    {
      return new XmlNumeric2Converter(schemaType);
    }

    #region AUTOGENERATED_XMLNUMERIC2CONVERTER

    //-----------------------------------------------
    // ToBoolean
    //-----------------------------------------------

    // This converter does not support conversions to Boolean.


    //-----------------------------------------------
    // ToDateTime
    //-----------------------------------------------

    // This converter does not support conversions to DateTime.


    //-----------------------------------------------
    // ToDecimal
    //-----------------------------------------------

    // This converter does not support conversions to Decimal.


    //-----------------------------------------------
    // ToDouble
    //-----------------------------------------------

    public virtual double ToDouble(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      if (TypeCode == XmlTypeCode.Float) return ((double)XmlConvert.ToSingle((string)value));
      return XmlConvert.ToDouble((string)value);
    }
    public override double ToDouble(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DoubleType) return ((double)value);
      if (sourceType == SingleType) return ((double)(float)value);
      if (sourceType == StringType) return this.ToDouble((string)value);
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAsDouble;

      return (double)ChangeListType(value, DoubleType, null);
    }


    //-----------------------------------------------
    // ToInt32
    //-----------------------------------------------

    // This converter does not support conversions to Int32.


    //-----------------------------------------------
    // ToInt64
    //-----------------------------------------------

    // This converter does not support conversions to Int64.


    //-----------------------------------------------
    // ToSingle
    //-----------------------------------------------

    public virtual float ToSingle(double value)
    {
      return ((float)(double)value);
    }

    public virtual float ToSingle(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      if (TypeCode == XmlTypeCode.Float) return XmlConvert.ToSingle((string)value);
      return ((float)XmlConvert.ToDouble((string)value));
    }
    public virtual float ToSingle(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DoubleType) return ((float)(double)value);
      if (sourceType == SingleType) return ((float)value);
      if (sourceType == StringType) return this.ToSingle((string)value);
      if (sourceType == XmlAtomicValueType) return ((float)((XmlAtomicValue)value).ValueAs(SingleType));

      return (float)ChangeListType(value, SingleType, null);
    }


    //-----------------------------------------------
    // ToString
    //-----------------------------------------------

    public override string ToString(double value)
    {
      if (TypeCode == XmlTypeCode.Float) return XmlConvert.ToString(ToSingle((double)value));
      return XmlConvert.ToString((double)value);
    }
    public virtual string ToString(float value)
    {
      if (TypeCode == XmlTypeCode.Float) return XmlConvert.ToString((float)value);
      return XmlConvert.ToString((double)(float)value);
    }

    public override string ToString(object value, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DoubleType) return this.ToString((double)value);
      if (sourceType == SingleType) return this.ToString((float)value);
      if (sourceType == StringType) return ((string)value);
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).Value;

      return (string)ChangeListType(value, StringType, nsResolver);
    }


    //-----------------------------------------------
    // ChangeType
    //-----------------------------------------------

    public override object ChangeType(double value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DoubleType) return ((double)value);
      if (destinationType == SingleType) return ((float)(double)value);
      if (destinationType == StringType) return this.ToString((double)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (double)value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (double)value));

      return ChangeListType(value, destinationType, null);
    }

    public override object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DoubleType) return this.ToDouble((string)value);
      if (destinationType == SingleType) return this.ToSingle((string)value);
      if (destinationType == StringType) return ((string)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (string)value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (string)value));

      return ChangeListType(value, destinationType, nsResolver);
    }

    public override object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      Type sourceType = value.GetType();

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DoubleType) return this.ToDouble(value);
      if (destinationType == SingleType) return this.ToSingle(value);
      if (destinationType == StringType) return this.ToString(value, nsResolver);
      if (destinationType == XmlAtomicValueType)
      {
        if (sourceType == DoubleType) return (new XmlAtomicValue(SchemaType, (double)value));
        if (sourceType == SingleType) return (new XmlAtomicValue(SchemaType, value));
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }
      if (destinationType == XPathItemType)
      {
        if (sourceType == DoubleType) return (new XmlAtomicValue(SchemaType, (double)value));
        if (sourceType == SingleType) return (new XmlAtomicValue(SchemaType, value));
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }

      return ChangeListType(value, destinationType, nsResolver);
    }
    #endregion
  }
}
