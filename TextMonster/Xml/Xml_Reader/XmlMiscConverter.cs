using System;

namespace TextMonster.Xml.Xml_Reader
{
  internal class XmlMiscConverter : XmlBaseConverter
  {
    protected XmlMiscConverter(XmlSchemaType schemaType)
      : base(schemaType)
    {
    }

    public static XmlValueConverter Create(XmlSchemaType schemaType)
    {
      return new XmlMiscConverter(schemaType);
    }

    #region AUTOGENERATED_XMLMISCCONVERTER

    //-----------------------------------------------
    // ToBoolean
    //-----------------------------------------------

    // This converter does not support conversions to Boolean.


    //-----------------------------------------------
    // ToDateTime
    //-----------------------------------------------

    // This converter does not support conversions to DateTime.


    //-----------------------------------------------
    // ToDecimal
    //-----------------------------------------------

    // This converter does not support conversions to Decimal.


    //-----------------------------------------------
    // ToDouble
    //-----------------------------------------------

    // This converter does not support conversions to Double.


    //-----------------------------------------------
    // ToInt32
    //-----------------------------------------------

    // This converter does not support conversions to Int32.


    //-----------------------------------------------
    // ToInt64
    //-----------------------------------------------

    // This converter does not support conversions to Int64.


    //-----------------------------------------------
    // ToSingle
    //-----------------------------------------------

    // This converter does not support conversions to Single.


    //-----------------------------------------------
    // ToString
    //-----------------------------------------------

    public override string ToString(string value, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");

      return (string)value;
    }
    public override string ToString(object value, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == ByteArrayType)
      {
        switch (TypeCode)
        {
          case XmlTypeCode.Base64Binary: return Base64BinaryToString((byte[])value);
          case XmlTypeCode.HexBinary: return XmlConvert.ToBinHexString((byte[])value);
        }
      }
      if (sourceType == StringType) return (string)value;
      if (IsDerivedFrom(sourceType, UriType)) if (TypeCode == XmlTypeCode.AnyUri) return AnyUriToString((Uri)value);
      if (sourceType == TimeSpanType)
      {
        switch (TypeCode)
        {
          case XmlTypeCode.DayTimeDuration: return DayTimeDurationToString((TimeSpan)value);
          case XmlTypeCode.Duration: return DurationToString((TimeSpan)value);
          case XmlTypeCode.YearMonthDuration: return YearMonthDurationToString((TimeSpan)value);
        }
      }
      if (IsDerivedFrom(sourceType, XmlQualifiedNameType))
      {
        switch (TypeCode)
        {
          case XmlTypeCode.Notation: return QNameToString((XmlQualifiedName)value, nsResolver);
          case XmlTypeCode.QName: return QNameToString((XmlQualifiedName)value, nsResolver);
        }
      }

      return (string)ChangeTypeWildcardDestination(value, StringType, nsResolver);
    }


    //-----------------------------------------------
    // ChangeType
    //-----------------------------------------------

    public override object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == ByteArrayType)
      {
        switch (TypeCode)
        {
          case XmlTypeCode.Base64Binary: return StringToBase64Binary((string)value);
          case XmlTypeCode.HexBinary: return StringToHexBinary((string)value);
        }
      }
      if (destinationType == XmlQualifiedNameType)
      {
        switch (TypeCode)
        {
          case XmlTypeCode.Notation: return StringToQName((string)value, nsResolver);
          case XmlTypeCode.QName: return StringToQName((string)value, nsResolver);
        }
      }
      if (destinationType == StringType) return (string)value;
      if (destinationType == TimeSpanType)
      {
        switch (TypeCode)
        {
          case XmlTypeCode.DayTimeDuration: return StringToDayTimeDuration((string)value);
          case XmlTypeCode.Duration: return StringToDuration((string)value);
          case XmlTypeCode.YearMonthDuration: return StringToYearMonthDuration((string)value);
        }
      }
      if (destinationType == UriType) if (TypeCode == XmlTypeCode.AnyUri) return XmlConvert.ToUri((string)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (string)value, nsResolver));

      return ChangeTypeWildcardSource(value, destinationType, nsResolver);
    }

    public override object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      Type sourceType = value.GetType();

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == ByteArrayType)
      {
        if (sourceType == ByteArrayType)
        {
          switch (TypeCode)
          {
            case XmlTypeCode.Base64Binary: return ((byte[])value);
            case XmlTypeCode.HexBinary: return ((byte[])value);
          }
        }
        if (sourceType == StringType)
        {
          switch (TypeCode)
          {
            case XmlTypeCode.Base64Binary: return StringToBase64Binary((string)value);
            case XmlTypeCode.HexBinary: return StringToHexBinary((string)value);
          }
        }
      }
      if (destinationType == XmlQualifiedNameType)
      {
        if (sourceType == StringType)
        {
          switch (TypeCode)
          {
            case XmlTypeCode.Notation: return StringToQName((string)value, nsResolver);
            case XmlTypeCode.QName: return StringToQName((string)value, nsResolver);
          }
        }
        if (IsDerivedFrom(sourceType, XmlQualifiedNameType))
        {
          switch (TypeCode)
          {
            case XmlTypeCode.Notation: return ((XmlQualifiedName)value);
            case XmlTypeCode.QName: return ((XmlQualifiedName)value);
          }
        }
      }
      if (destinationType == StringType) return this.ToString(value, nsResolver);
      if (destinationType == TimeSpanType)
      {
        if (sourceType == StringType)
        {
          switch (TypeCode)
          {
            case XmlTypeCode.DayTimeDuration: return StringToDayTimeDuration((string)value);
            case XmlTypeCode.Duration: return StringToDuration((string)value);
            case XmlTypeCode.YearMonthDuration: return StringToYearMonthDuration((string)value);
          }
        }
        if (sourceType == TimeSpanType)
        {
          switch (TypeCode)
          {
            case XmlTypeCode.DayTimeDuration: return ((TimeSpan)value);
            case XmlTypeCode.Duration: return ((TimeSpan)value);
            case XmlTypeCode.YearMonthDuration: return ((TimeSpan)value);
          }
        }
      }
      if (destinationType == UriType)
      {
        if (sourceType == StringType) if (TypeCode == XmlTypeCode.AnyUri) return XmlConvert.ToUri((string)value);
        if (IsDerivedFrom(sourceType, UriType)) if (TypeCode == XmlTypeCode.AnyUri) return ((Uri)value);
      }
      if (destinationType == XmlAtomicValueType)
      {
        if (sourceType == ByteArrayType)
        {
          switch (TypeCode)
          {
            case XmlTypeCode.Base64Binary: return (new XmlAtomicValue(SchemaType, value));
            case XmlTypeCode.HexBinary: return (new XmlAtomicValue(SchemaType, value));
          }
        }
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value, nsResolver));
        if (sourceType == TimeSpanType)
        {
          switch (TypeCode)
          {
            case XmlTypeCode.DayTimeDuration: return (new XmlAtomicValue(SchemaType, value));
            case XmlTypeCode.Duration: return (new XmlAtomicValue(SchemaType, value));
            case XmlTypeCode.YearMonthDuration: return (new XmlAtomicValue(SchemaType, value));
          }
        }
        if (IsDerivedFrom(sourceType, UriType)) if (TypeCode == XmlTypeCode.AnyUri) return (new XmlAtomicValue(SchemaType, value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
        if (IsDerivedFrom(sourceType, XmlQualifiedNameType))
        {
          switch (TypeCode)
          {
            case XmlTypeCode.Notation: return (new XmlAtomicValue(SchemaType, value, nsResolver));
            case XmlTypeCode.QName: return (new XmlAtomicValue(SchemaType, value, nsResolver));
          }
        }
      }
      if (destinationType == XPathItemType)
      {
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }
      if (destinationType == XPathItemType) return ((XPathItem)this.ChangeType(value, XmlAtomicValueType, nsResolver));
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAs(destinationType, nsResolver);

      return ChangeListType(value, destinationType, nsResolver);
    }


    //-----------------------------------------------
    // Helpers
    //-----------------------------------------------

    private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      Type sourceType = value.GetType();

      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAs(destinationType, nsResolver);

      return ChangeListType(value, destinationType, nsResolver);
    }
    private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (destinationType == XPathItemType) return ((XPathItem)this.ChangeType(value, XmlAtomicValueType, nsResolver));

      return ChangeListType(value, destinationType, nsResolver);
    }
    #endregion
  }
}
