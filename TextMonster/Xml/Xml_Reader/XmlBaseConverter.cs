using System;
using System.Collections;

namespace TextMonster.Xml.Xml_Reader
{
  internal abstract class XmlBaseConverter : XmlValueConverter
  {
    private XmlSchemaType schemaType;
    private XmlTypeCode typeCode;
    private Type clrTypeDefault;

    protected XmlBaseConverter(XmlSchemaType schemaType)
    {

      // XmlValueConverter is defined only on types with simple content
      XmlSchemaDatatype datatype = schemaType.Datatype;

      while (schemaType != null && !(schemaType is XmlSchemaSimpleType))
      {
        schemaType = schemaType.BaseXmlSchemaType;
      }
      if (schemaType == null)
      { //Did not find any simple type in the parent chain
        schemaType = XmlSchemaType.GetBuiltInSimpleType(datatype.TypeCode);
      }

      this.schemaType = schemaType;
      this.typeCode = schemaType.TypeCode;
      this.clrTypeDefault = schemaType.Datatype.ValueType;
    }

    protected XmlBaseConverter(XmlTypeCode typeCode)
    {
      switch (typeCode)
      {
        case XmlTypeCode.Item:
        this.clrTypeDefault = XPathItemType;
        break;

        case XmlTypeCode.Node:
        this.clrTypeDefault = XPathNavigatorType;
        break;

        case XmlTypeCode.AnyAtomicType:
        this.clrTypeDefault = XmlAtomicValueType;
        break;

        default:
        break;
      }

      this.typeCode = typeCode;
    }

    protected XmlBaseConverter(XmlBaseConverter converterAtomic)
    {
      this.schemaType = converterAtomic.schemaType;
      this.typeCode = converterAtomic.typeCode;
      this.clrTypeDefault = Array.CreateInstance(converterAtomic.DefaultClrType, 0).GetType();
    }

    protected XmlBaseConverter(XmlBaseConverter converterAtomic, Type clrTypeDefault)
    {
      this.schemaType = converterAtomic.schemaType;
      this.typeCode = converterAtomic.typeCode;
      this.clrTypeDefault = clrTypeDefault;
    }

    protected static readonly Type ICollectionType = typeof(ICollection);
    protected static readonly Type IEnumerableType = typeof(IEnumerable);
    protected static readonly Type IListType = typeof(IList);
    protected static readonly Type ObjectArrayType = typeof(object[]);
    protected static readonly Type StringArrayType = typeof(string[]);
    protected static readonly Type XmlAtomicValueArrayType = typeof(XmlAtomicValue[]);

    #region AUTOGENERATED_XMLBASECONVERTER
    protected static readonly Type DecimalType = typeof(decimal);
    protected static readonly Type Int32Type = typeof(int);
    protected static readonly Type Int64Type = typeof(long);
    protected static readonly Type StringType = typeof(string);
    protected static readonly Type XmlAtomicValueType = typeof(XmlAtomicValue);
    protected static readonly Type ObjectType = typeof(object);
    protected static readonly Type ByteType = typeof(byte);
    protected static readonly Type Int16Type = typeof(short);
    protected static readonly Type SByteType = typeof(sbyte);
    protected static readonly Type UInt16Type = typeof(ushort);
    protected static readonly Type UInt32Type = typeof(uint);
    protected static readonly Type UInt64Type = typeof(ulong);
    protected static readonly Type XPathItemType = typeof(XPathItem);
    protected static readonly Type DoubleType = typeof(double);
    protected static readonly Type SingleType = typeof(float);
    protected static readonly Type DateTimeType = typeof(DateTime);
    protected static readonly Type DateTimeOffsetType = typeof(DateTimeOffset);
    protected static readonly Type BooleanType = typeof(bool);
    protected static readonly Type ByteArrayType = typeof(Byte[]);
    protected static readonly Type XmlQualifiedNameType = typeof(XmlQualifiedName);
    protected static readonly Type UriType = typeof(Uri);
    protected static readonly Type TimeSpanType = typeof(TimeSpan);
    protected static readonly Type XPathNavigatorType = typeof(XPathNavigator);

    public virtual bool ToBoolean(bool value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public override bool ToBoolean(DateTime value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public virtual bool ToBoolean(DateTimeOffset value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public virtual bool ToBoolean(decimal value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public override bool ToBoolean(double value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public override bool ToBoolean(int value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public override bool ToBoolean(long value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public virtual bool ToBoolean(float value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public override bool ToBoolean(string value) { return (bool)ChangeType((object)value, BooleanType, null); }
    public override bool ToBoolean(object value) { return (bool)ChangeType((object)value, BooleanType, null); }

    public override DateTime ToDateTime(bool value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public virtual DateTime ToDateTime(DateTime value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public virtual DateTime ToDateTime(DateTimeOffset value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public virtual DateTime ToDateTime(decimal value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public override DateTime ToDateTime(double value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public override DateTime ToDateTime(int value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public override DateTime ToDateTime(long value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public virtual DateTime ToDateTime(float value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public override DateTime ToDateTime(string value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }
    public override DateTime ToDateTime(object value) { return (DateTime)ChangeType((object)value, DateTimeType, null); }

    public virtual DateTimeOffset ToDateTimeOffset(bool value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(DateTime value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(DateTimeOffset value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(decimal value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(double value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(int value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(long value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(float value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(string value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }
    public virtual DateTimeOffset ToDateTimeOffset(object value) { return (DateTimeOffset)ChangeType((object)value, DateTimeOffsetType, null); }

    public virtual decimal ToDecimal(bool value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(DateTime value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(DateTimeOffset value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(decimal value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(double value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(int value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(long value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(float value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public virtual decimal ToDecimal(string value) { return (decimal)ChangeType((object)value, DecimalType, null); }
    public override decimal ToDecimal(object value) { return (decimal)ChangeType((object)value, DecimalType, null); }

    public override double ToDouble(bool value) { return (double)ChangeType((object)value, DoubleType, null); }
    public override double ToDouble(DateTime value) { return (double)ChangeType((object)value, DoubleType, null); }
    public virtual double ToDouble(DateTimeOffset value) { return (double)ChangeType((object)value, DoubleType, null); }
    public virtual double ToDouble(decimal value) { return (double)ChangeType((object)value, DoubleType, null); }
    public virtual double ToDouble(double value) { return (double)ChangeType((object)value, DoubleType, null); }
    public override double ToDouble(int value) { return (double)ChangeType((object)value, DoubleType, null); }
    public override double ToDouble(long value) { return (double)ChangeType((object)value, DoubleType, null); }
    public virtual double ToDouble(float value) { return (double)ChangeType((object)value, DoubleType, null); }
    public override double ToDouble(string value) { return (double)ChangeType((object)value, DoubleType, null); }
    public override double ToDouble(object value) { return (double)ChangeType((object)value, DoubleType, null); }

    public override int ToInt32(bool value) { return (int)ChangeType((object)value, Int32Type, null); }
    public override int ToInt32(DateTime value) { return (int)ChangeType((object)value, Int32Type, null); }
    public virtual int ToInt32(DateTimeOffset value) { return (int)ChangeType((object)value, Int32Type, null); }
    public virtual int ToInt32(decimal value) { return (int)ChangeType((object)value, Int32Type, null); }
    public override int ToInt32(double value) { return (int)ChangeType((object)value, Int32Type, null); }
    public virtual int ToInt32(int value) { return (int)ChangeType((object)value, Int32Type, null); }
    public override int ToInt32(long value) { return (int)ChangeType((object)value, Int32Type, null); }
    public virtual int ToInt32(float value) { return (int)ChangeType((object)value, Int32Type, null); }
    public override int ToInt32(string value) { return (int)ChangeType((object)value, Int32Type, null); }
    public override int ToInt32(object value) { return (int)ChangeType((object)value, Int32Type, null); }

    public override long ToInt64(bool value) { return (long)ChangeType((object)value, Int64Type, null); }
    public override long ToInt64(DateTime value) { return (long)ChangeType((object)value, Int64Type, null); }
    public virtual long ToInt64(DateTimeOffset value) { return (long)ChangeType((object)value, Int64Type, null); }
    public virtual long ToInt64(decimal value) { return (long)ChangeType((object)value, Int64Type, null); }
    public override long ToInt64(double value) { return (long)ChangeType((object)value, Int64Type, null); }
    public override long ToInt64(int value) { return (long)ChangeType((object)value, Int64Type, null); }
    public virtual long ToInt64(long value) { return (long)ChangeType((object)value, Int64Type, null); }
    public virtual long ToInt64(float value) { return (long)ChangeType((object)value, Int64Type, null); }
    public override long ToInt64(string value) { return (long)ChangeType((object)value, Int64Type, null); }
    public override long ToInt64(object value) { return (long)ChangeType((object)value, Int64Type, null); }

    public virtual float ToSingle(bool value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(DateTime value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(DateTimeOffset value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(decimal value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(double value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(int value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(long value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(float value) { return (float)ChangeType((object)value, SingleType, null); }
    public virtual float ToSingle(string value) { return (float)ChangeType((object)value, SingleType, null); }
    public override float ToSingle(object value) { return (float)ChangeType((object)value, SingleType, null); }

    public override string ToString(bool value) { return (string)ChangeType((object)value, StringType, null); }
    public override string ToString(DateTime value) { return (string)ChangeType((object)value, StringType, null); }
    public virtual string ToString(DateTimeOffset value) { return (string)ChangeType((object)value, StringType, null); }
    public virtual string ToString(decimal value) { return (string)ChangeType((object)value, StringType, null); }
    public override string ToString(double value) { return (string)ChangeType((object)value, StringType, null); }
    public override string ToString(int value) { return (string)ChangeType((object)value, StringType, null); }
    public override string ToString(long value) { return (string)ChangeType((object)value, StringType, null); }
    public virtual string ToString(float value) { return (string)ChangeType((object)value, StringType, null); }
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver) { return (string)ChangeType((object)value, StringType, nsResolver); }
    public override string ToString(object value, IXmlNamespaceResolver nsResolver) { return (string)ChangeType((object)value, StringType, nsResolver); }
    public virtual string ToString(string value) { return this.ToString(value, null); }
    public override string ToString(object value) { return this.ToString(value, null); }

    public override object ChangeType(bool value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public override object ChangeType(DateTime value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public virtual object ChangeType(DateTimeOffset value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public virtual object ChangeType(decimal value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public override object ChangeType(double value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public override object ChangeType(int value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public override object ChangeType(long value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public override object ChangeType(float value, Type destinationType) { return (object)ChangeType((object)value, destinationType, null); }
    public override object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver) { return (object)ChangeType((object)value, destinationType, nsResolver); }
    public virtual object ChangeType(string value, Type destinationType) { return this.ChangeType(value, destinationType, null); }
    public override object ChangeType(object value, Type destinationType) { return this.ChangeType(value, destinationType, null); }

    #endregion

    /// <summary>
    /// Return this converter's prime schema type (may be null in case of Node, Item, etc).
    /// </summary>
    protected XmlSchemaType SchemaType
    {
      get { return this.schemaType; }
    }

    /// <summary>
    /// Return the XmlTypeCode of this converter's prime schema type.
    /// </summary>
    protected XmlTypeCode TypeCode
    {
      get { return this.typeCode; }
    }

    /// <summary>
    /// Return a string representation of this converter's prime schema type.
    /// </summary>
    protected string XmlTypeName
    {
      get
      {
        XmlSchemaType type = this.schemaType;

        if (type != null)
        {
          while (type.QualifiedName.IsEmpty)
          {
            // Walk base classes until one with a name is found (in worst case, all simple types derive from xs:anySimpleType)
            type = type.BaseXmlSchemaType;
          }

          return QNameToString(type.QualifiedName);
        }

        // SchemaType is null in the case of item, node, and xdt:anyAtomicType
        if (this.typeCode == XmlTypeCode.Node) return "node";
        if (this.typeCode == XmlTypeCode.AnyAtomicType) return "xdt:anyAtomicType";

        return "item";
      }
    }

    /// <summary>
    /// Return default V1 Clr mapping of this converter's type.
    /// </summary>
    protected Type DefaultClrType
    {
      get { return this.clrTypeDefault; }
    }

    /// <summary>
    /// Type.IsSubtypeOf does not return true if types are equal, this method does.
    /// </summary>
    protected static bool IsDerivedFrom(Type derivedType, Type baseType)
    {
      while (derivedType != null)
      {
        if (derivedType == baseType)
          return true;

        derivedType = derivedType.BaseType;
      }
      return false;
    }

    /// <summary>
    /// Create an InvalidCastException for cases where either "destinationType" or "sourceType" is not a supported CLR representation
    /// for this Xml type.
    /// </summary>
    protected Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType)
    {
      if (sourceType == destinationType)
        return new InvalidCastException(Res.GetString(Res.XmlConvert_TypeBadMapping, XmlTypeName, sourceType.Name));

      return new InvalidCastException(Res.GetString(Res.XmlConvert_TypeBadMapping2, XmlTypeName, sourceType.Name, destinationType.Name));
    }

    /// <summary>
    /// Convert an XmlQualifiedName to a string, using somewhat different rules than XmlQualifiedName.ToString():
    ///   1. Recognize the built-in xs: and xdt: namespaces and print the short prefix rather than the long namespace
    ///   2. Use brace characters "{", "}" around the namespace portion of the QName
    /// </summary>
    protected static string QNameToString(XmlQualifiedName name)
    {
      if (name.Namespace.Length == 0)
      {
        return name.Name;
      }
      else if (name.Namespace == XmlReservedNs.NsXs)
      {
        return "xs:" + name.Name;
      }
      else if (name.Namespace == XmlReservedNs.NsXQueryDataType)
      {
        return "xdt:" + name.Name;
      }
      else
      {
        return "{" + name.Namespace + "}" + name.Name;
      }
    }

    /// <summary>
    /// This method is called when a valid conversion cannot be found.  By default, this method throws an error.  It can
    /// be overriden in derived classes to support list conversions.
    /// </summary>
    protected virtual object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      throw CreateInvalidClrMappingException(value.GetType(), destinationType);
    }


    //------------------------------------------------------------------------
    // From String Conversion Helpers
    //------------------------------------------------------------------------

    protected static byte[] StringToBase64Binary(string value)
    {
      return Convert.FromBase64String(XmlConvert.TrimString(value));
    }

    protected static DateTime StringToDate(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.Date));
    }

    protected static DateTime StringToDateTime(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.DateTime));
    }

    protected static TimeSpan StringToDayTimeDuration(string value)
    {
      // Parse string as DayTimeDuration and convert it to a DayTimeDuration TimeSpan (it is an error to have year and month parts)
      return new XsdDuration(value, XsdDuration.DurationType.DayTimeDuration).ToTimeSpan(XsdDuration.DurationType.DayTimeDuration);
    }

    protected static TimeSpan StringToDuration(string value)
    {
      return new XsdDuration(value, XsdDuration.DurationType.Duration).ToTimeSpan(XsdDuration.DurationType.Duration);
    }

    protected static DateTime StringToGDay(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.GDay));
    }

    protected static DateTime StringToGMonth(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.GMonth));
    }

    protected static DateTime StringToGMonthDay(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.GMonthDay));
    }

    protected static DateTime StringToGYear(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.GYear));
    }

    protected static DateTime StringToGYearMonth(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.GYearMonth));
    }

    protected static DateTimeOffset StringToDateOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.Date));
    }

    protected static DateTimeOffset StringToDateTimeOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.DateTime));
    }

    protected static DateTimeOffset StringToGDayOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.GDay));
    }

    protected static DateTimeOffset StringToGMonthOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.GMonth));
    }

    protected static DateTimeOffset StringToGMonthDayOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.GMonthDay));
    }

    protected static DateTimeOffset StringToGYearOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.GYear));
    }

    protected static DateTimeOffset StringToGYearMonthOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.GYearMonth));
    }

    protected static byte[] StringToHexBinary(string value)
    {
      try
      {
        return XmlConvert.FromBinHexString(XmlConvert.TrimString(value), false);
      }
      catch (XmlException e)
      {
        throw new FormatException(e.Message);
      }
    }

    protected static XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver)
    {
      string prefix, localName, ns;

      value = value.Trim();

      // Parse prefix:localName
      try
      {
        ValidateNames.ParseQNameThrow(value, out prefix, out localName);
      }
      catch (XmlException e)
      {
        throw new FormatException(e.Message);
      }

      // Throw error if no namespaces are in scope
      if (nsResolver == null)
        throw new InvalidCastException(Res.GetString(Res.XmlConvert_TypeNoNamespace, value, prefix));

      // Lookup namespace
      ns = nsResolver.LookupNamespace(prefix);
      if (ns == null)
        throw new InvalidCastException(Res.GetString(Res.XmlConvert_TypeNoNamespace, value, prefix));

      // Create XmlQualfiedName
      return new XmlQualifiedName(localName, ns);
    }

    protected static DateTime StringToTime(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.Time));
    }

    protected static DateTimeOffset StringToTimeOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.Time));
    }

    protected static TimeSpan StringToYearMonthDuration(string value)
    {
      // Parse string as YearMonthDuration and convert it to a YearMonthDuration TimeSpan (it is an error to have day and time parts)
      return new XsdDuration(value, XsdDuration.DurationType.YearMonthDuration).ToTimeSpan(XsdDuration.DurationType.YearMonthDuration);
    }


    //------------------------------------------------------------------------
    // To String Conversion Helpers
    //------------------------------------------------------------------------

    protected static string AnyUriToString(Uri value)
    {
      return value.OriginalString;
    }

    protected static string Base64BinaryToString(byte[] value)
    {
      return Convert.ToBase64String(value);
    }

    protected static string DateToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.Date)).ToString();
    }

    protected static string DateTimeToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.DateTime)).ToString();
    }

    protected static string DayTimeDurationToString(TimeSpan value)
    {
      return new XsdDuration(value, XsdDuration.DurationType.DayTimeDuration).ToString(XsdDuration.DurationType.DayTimeDuration);
    }

    protected static string DurationToString(TimeSpan value)
    {
      return new XsdDuration(value, XsdDuration.DurationType.Duration).ToString(XsdDuration.DurationType.Duration);
    }

    protected static string GDayToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GDay)).ToString();
    }

    protected static string GMonthToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GMonth)).ToString();
    }

    protected static string GMonthDayToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GMonthDay)).ToString();
    }

    protected static string GYearToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GYear)).ToString();
    }

    protected static string GYearMonthToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GYearMonth)).ToString();
    }

    protected static string DateOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.Date)).ToString();
    }

    protected static string DateTimeOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.DateTime)).ToString();
    }

    protected static string GDayOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GDay)).ToString();
    }

    protected static string GMonthOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GMonth)).ToString();
    }

    protected static string GMonthDayOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GMonthDay)).ToString();
    }

    protected static string GYearOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GYear)).ToString();
    }

    protected static string GYearMonthOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.GYearMonth)).ToString();
    }

    protected static string QNameToString(XmlQualifiedName qname, IXmlNamespaceResolver nsResolver)
    {
      string prefix;

      if (nsResolver == null)
        return string.Concat("{", qname.Namespace, "}", qname.Name);

      prefix = nsResolver.LookupPrefix(qname.Namespace);
      if (prefix == null)
        throw new InvalidCastException(Res.GetString(Res.XmlConvert_TypeNoPrefix, qname.ToString(), qname.Namespace));

      return (prefix.Length != 0) ? string.Concat(prefix, ":", qname.Name) : qname.Name;
    }

    protected static string TimeToString(DateTime value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.Time)).ToString();
    }

    protected static string TimeOffsetToString(DateTimeOffset value)
    {
      return (new XsdDateTime(value, XsdDateTimeFlags.Time)).ToString();
    }

    protected static string YearMonthDurationToString(TimeSpan value)
    {
      return new XsdDuration(value, XsdDuration.DurationType.YearMonthDuration).ToString(XsdDuration.DurationType.YearMonthDuration);
    }


    //------------------------------------------------------------------------
    // Other Conversion Helpers
    //------------------------------------------------------------------------

    internal static DateTime DateTimeOffsetToDateTime(DateTimeOffset value)
    {
      return value.LocalDateTime;
    }

    internal static int DecimalToInt32(decimal value)
    {
      if (value < (decimal)Int32.MinValue || value > (decimal)Int32.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "Int32" }));

      return (int)value;
    }

    protected static long DecimalToInt64(decimal value)
    {
      if (value < (decimal)Int64.MinValue || value > (decimal)Int64.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "Int64" }));

      return (long)value;
    }

    protected static ulong DecimalToUInt64(decimal value)
    {
      if (value < (decimal)UInt64.MinValue || value > (decimal)UInt64.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "UInt64" }));

      return (ulong)value;
    }

    protected static byte Int32ToByte(int value)
    {
      if (value < (int)Byte.MinValue || value > (int)Byte.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "Byte" }));

      return (byte)value;
    }

    protected static short Int32ToInt16(int value)
    {
      if (value < (int)Int16.MinValue || value > (int)Int16.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "Int16" }));

      return (short)value;
    }

    protected static sbyte Int32ToSByte(int value)
    {
      if (value < (int)SByte.MinValue || value > (int)SByte.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "SByte" }));

      return (sbyte)value;
    }

    protected static ushort Int32ToUInt16(int value)
    {
      if (value < (int)UInt16.MinValue || value > (int)UInt16.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "UInt16" }));

      return (ushort)value;
    }

    protected static int Int64ToInt32(long value)
    {
      if (value < (long)Int32.MinValue || value > (long)Int32.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "Int32" }));

      return (int)value;
    }

    protected static uint Int64ToUInt32(long value)
    {
      if (value < (long)UInt32.MinValue || value > (long)UInt32.MaxValue)
        throw new OverflowException(Res.GetString(Res.XmlConvert_Overflow, new string[] { XmlConvert.ToString(value), "UInt32" }));

      return (uint)value;
    }

    protected static DateTime UntypedAtomicToDateTime(string value)
    {
      return (DateTime)(new XsdDateTime(value, XsdDateTimeFlags.AllXsd));
    }

    protected static DateTimeOffset UntypedAtomicToDateTimeOffset(string value)
    {
      return (DateTimeOffset)(new XsdDateTime(value, XsdDateTimeFlags.AllXsd));
    }
  }
}
