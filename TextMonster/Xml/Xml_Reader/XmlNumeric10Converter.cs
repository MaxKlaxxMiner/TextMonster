using System;

namespace TextMonster.Xml.Xml_Reader
{
  internal class XmlNumeric10Converter : XmlBaseConverter
  {
    protected XmlNumeric10Converter(XmlSchemaType schemaType)
      : base(schemaType)
    {
    }

    public static XmlValueConverter Create(XmlSchemaType schemaType)
    {
      return new XmlNumeric10Converter(schemaType);
    }

    #region AUTOGENERATED_XMLNUMERIC10CONVERTER

    //-----------------------------------------------
    // ToBoolean
    //-----------------------------------------------

    // This converter does not support conversions to Boolean.


    //-----------------------------------------------
    // ToDateTime
    //-----------------------------------------------

    // This converter does not support conversions to DateTime.


    //-----------------------------------------------
    // ToDecimal
    //-----------------------------------------------

    public virtual decimal ToDecimal(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      if (TypeCode == XmlTypeCode.Decimal) return XmlConvert.ToDecimal((string)value);
      return XmlConvert.ToInteger((string)value);
    }
    public override decimal ToDecimal(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DecimalType) return ((decimal)value);
      if (sourceType == Int32Type) return ((decimal)(int)value);
      if (sourceType == Int64Type) return ((decimal)(long)value);
      if (sourceType == StringType) return this.ToDecimal((string)value);
      if (sourceType == XmlAtomicValueType) return ((decimal)((XmlAtomicValue)value).ValueAs(DecimalType));

      return (decimal)ChangeTypeWildcardDestination(value, DecimalType, null);
    }


    //-----------------------------------------------
    // ToDouble
    //-----------------------------------------------

    // This converter does not support conversions to Double.


    //-----------------------------------------------
    // ToInt32
    //-----------------------------------------------

    public override int ToInt32(long value)
    {
      return Int64ToInt32((long)value);
    }
    public override int ToInt32(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      if (TypeCode == XmlTypeCode.Decimal) return DecimalToInt32(XmlConvert.ToDecimal((string)value));
      return XmlConvert.ToInt32((string)value);
    }
    public override int ToInt32(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DecimalType) return DecimalToInt32((decimal)value);
      if (sourceType == Int32Type) return ((int)value);
      if (sourceType == Int64Type) return Int64ToInt32((long)value);
      if (sourceType == StringType) return this.ToInt32((string)value);
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAsInt;

      return (int)ChangeTypeWildcardDestination(value, Int32Type, null);
    }


    //-----------------------------------------------
    // ToInt64
    //-----------------------------------------------

    public override long ToInt64(int value)
    {
      return ((long)(int)value);
    }

    public override long ToInt64(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      if (TypeCode == XmlTypeCode.Decimal) return DecimalToInt64(XmlConvert.ToDecimal((string)value));
      return XmlConvert.ToInt64((string)value);
    }
    public override long ToInt64(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DecimalType) return DecimalToInt64((decimal)value);
      if (sourceType == Int32Type) return ((long)(int)value);
      if (sourceType == Int64Type) return ((long)value);
      if (sourceType == StringType) return this.ToInt64((string)value);
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAsLong;

      return (long)ChangeTypeWildcardDestination(value, Int64Type, null);
    }


    //-----------------------------------------------
    // ToSingle
    //-----------------------------------------------

    // This converter does not support conversions to Single.


    //-----------------------------------------------
    // ToString
    //-----------------------------------------------

    public virtual string ToString(decimal value)
    {
      if (TypeCode == XmlTypeCode.Decimal) return XmlConvert.ToString((decimal)value);
      return XmlConvert.ToString(decimal.Truncate((decimal)value));
    }
    public override string ToString(int value)
    {
      return XmlConvert.ToString((int)value);
    }
    public override string ToString(long value)
    {
      return XmlConvert.ToString((long)value);
    }

    public override string ToString(object value, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DecimalType) return this.ToString((decimal)value);
      if (sourceType == Int32Type) return XmlConvert.ToString((int)value);
      if (sourceType == Int64Type) return XmlConvert.ToString((long)value);
      if (sourceType == StringType) return ((string)value);
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).Value;

      return (string)ChangeTypeWildcardDestination(value, StringType, nsResolver);
    }


    //-----------------------------------------------
    // ChangeType
    //-----------------------------------------------

    public virtual object ChangeType(decimal value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DecimalType) return ((decimal)value);
      if (destinationType == Int32Type) return DecimalToInt32((decimal)value);
      if (destinationType == Int64Type) return DecimalToInt64((decimal)value);
      if (destinationType == StringType) return this.ToString((decimal)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, value));

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(int value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DecimalType) return ((decimal)(int)value);
      if (destinationType == Int32Type) return ((int)value);
      if (destinationType == Int64Type) return ((long)(int)value);
      if (destinationType == StringType) return XmlConvert.ToString((int)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (int)value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (int)value));

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(long value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DecimalType) return ((decimal)(long)value);
      if (destinationType == Int32Type) return Int64ToInt32((long)value);
      if (destinationType == Int64Type) return ((long)value);
      if (destinationType == StringType) return XmlConvert.ToString((long)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (long)value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (long)value));

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DecimalType) return this.ToDecimal((string)value);
      if (destinationType == Int32Type) return this.ToInt32((string)value);
      if (destinationType == Int64Type) return this.ToInt64((string)value);
      if (destinationType == StringType) return ((string)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (string)value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (string)value));

      return ChangeTypeWildcardSource(value, destinationType, nsResolver);
    }

    public override object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      Type sourceType = value.GetType();

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DecimalType) return this.ToDecimal(value);
      if (destinationType == Int32Type) return this.ToInt32(value);
      if (destinationType == Int64Type) return this.ToInt64(value);
      if (destinationType == StringType) return this.ToString(value, nsResolver);
      if (destinationType == XmlAtomicValueType)
      {
        if (sourceType == DecimalType) return (new XmlAtomicValue(SchemaType, value));
        if (sourceType == Int32Type) return (new XmlAtomicValue(SchemaType, (int)value));
        if (sourceType == Int64Type) return (new XmlAtomicValue(SchemaType, (long)value));
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }
      if (destinationType == XPathItemType)
      {
        if (sourceType == DecimalType) return (new XmlAtomicValue(SchemaType, value));
        if (sourceType == Int32Type) return (new XmlAtomicValue(SchemaType, (int)value));
        if (sourceType == Int64Type) return (new XmlAtomicValue(SchemaType, (long)value));
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }
      if (destinationType == ByteType) return Int32ToByte(this.ToInt32(value));
      if (destinationType == Int16Type) return Int32ToInt16(this.ToInt32(value));
      if (destinationType == SByteType) return Int32ToSByte(this.ToInt32(value));
      if (destinationType == UInt16Type) return Int32ToUInt16(this.ToInt32(value));
      if (destinationType == UInt32Type) return Int64ToUInt32(this.ToInt64(value));
      if (destinationType == UInt64Type) return DecimalToUInt64(this.ToDecimal(value));
      if (sourceType == ByteType) return this.ChangeType((int)(byte)value, destinationType);
      if (sourceType == Int16Type) return this.ChangeType((int)(short)value, destinationType);
      if (sourceType == SByteType) return this.ChangeType((int)(sbyte)value, destinationType);
      if (sourceType == UInt16Type) return this.ChangeType((int)(ushort)value, destinationType);
      if (sourceType == UInt32Type) return this.ChangeType((long)(uint)value, destinationType);
      if (sourceType == UInt64Type) return this.ChangeType((decimal)(ulong)value, destinationType);

      return ChangeListType(value, destinationType, nsResolver);
    }


    //-----------------------------------------------
    // Helpers
    //-----------------------------------------------

    private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      Type sourceType = value.GetType();

      if (sourceType == ByteType) return this.ChangeType((int)(byte)value, destinationType);
      if (sourceType == Int16Type) return this.ChangeType((int)(short)value, destinationType);
      if (sourceType == SByteType) return this.ChangeType((int)(sbyte)value, destinationType);
      if (sourceType == UInt16Type) return this.ChangeType((int)(ushort)value, destinationType);
      if (sourceType == UInt32Type) return this.ChangeType((long)(uint)value, destinationType);
      if (sourceType == UInt64Type) return this.ChangeType((decimal)(ulong)value, destinationType);

      return ChangeListType(value, destinationType, nsResolver);
    }
    private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (destinationType == ByteType) return Int32ToByte(this.ToInt32(value));
      if (destinationType == Int16Type) return Int32ToInt16(this.ToInt32(value));
      if (destinationType == SByteType) return Int32ToSByte(this.ToInt32(value));
      if (destinationType == UInt16Type) return Int32ToUInt16(this.ToInt32(value));
      if (destinationType == UInt32Type) return Int64ToUInt32(this.ToInt64(value));
      if (destinationType == UInt64Type) return DecimalToUInt64(this.ToDecimal(value));

      return ChangeListType(value, destinationType, nsResolver);
    }
    #endregion
  }
}
