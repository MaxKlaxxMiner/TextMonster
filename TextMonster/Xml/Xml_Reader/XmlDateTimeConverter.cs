using System;

namespace TextMonster.Xml.Xml_Reader
{
  internal class XmlDateTimeConverter : XmlBaseConverter
  {
    protected XmlDateTimeConverter(XmlSchemaType schemaType)
      : base(schemaType)
    {
    }

    public static XmlValueConverter Create(XmlSchemaType schemaType)
    {
      return new XmlDateTimeConverter(schemaType);
    }

    #region AUTOGENERATED_XMLDATETIMECONVERTER

    //-----------------------------------------------
    // ToBoolean
    //-----------------------------------------------

    // This converter does not support conversions to Boolean.


    //-----------------------------------------------
    // ToDateTime
    //-----------------------------------------------

    public virtual DateTime ToDateTime(DateTimeOffset value)
    {
      return DateTimeOffsetToDateTime(value);
    }

    public override DateTime ToDateTime(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      switch (TypeCode)
      {
        case XmlTypeCode.Date: return StringToDate((string)value);
        case XmlTypeCode.Time: return StringToTime((string)value);
        case XmlTypeCode.GDay: return StringToGDay((string)value);
        case XmlTypeCode.GMonth: return StringToGMonth((string)value);
        case XmlTypeCode.GMonthDay: return StringToGMonthDay((string)value);
        case XmlTypeCode.GYear: return StringToGYear((string)value);
        case XmlTypeCode.GYearMonth: return StringToGYearMonth((string)value);
      }
      return StringToDateTime((string)value);
    }
    public override DateTime ToDateTime(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DateTimeType) return ((DateTime)value);
      if (sourceType == DateTimeOffsetType) return this.ToDateTime((DateTimeOffset)value);
      if (sourceType == StringType) return this.ToDateTime((string)value);
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAsDateTime;

      return (DateTime)ChangeListType(value, DateTimeType, null);
    }

    //-----------------------------------------------
    // ToDateTimeOffset
    //-----------------------------------------------

    public virtual DateTimeOffset ToDateTimeOffset(DateTime value)
    {
      return new DateTimeOffset(value);
    }

    public virtual DateTimeOffset ToDateTimeOffset(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      switch (TypeCode)
      {
        case XmlTypeCode.Date: return StringToDateOffset((string)value);
        case XmlTypeCode.Time: return StringToTimeOffset((string)value);
        case XmlTypeCode.GDay: return StringToGDayOffset((string)value);
        case XmlTypeCode.GMonth: return StringToGMonthOffset((string)value);
        case XmlTypeCode.GMonthDay: return StringToGMonthDayOffset((string)value);
        case XmlTypeCode.GYear: return StringToGYearOffset((string)value);
        case XmlTypeCode.GYearMonth: return StringToGYearMonthOffset((string)value);
      }
      return StringToDateTimeOffset((string)value);
    }

    public virtual DateTimeOffset ToDateTimeOffset(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DateTimeType) return ToDateTimeOffset((DateTime)value);
      if (sourceType == DateTimeOffsetType) return ((DateTimeOffset)value);
      if (sourceType == StringType) return this.ToDateTimeOffset((string)value);
      if (sourceType == XmlAtomicValueType) return (DateTimeOffset)((XmlAtomicValue)value).ValueAsDateTime;

      return (DateTimeOffset)ChangeListType(value, DateTimeOffsetType, null);
    }

    //-----------------------------------------------
    // ToDecimal
    //-----------------------------------------------

    // This converter does not support conversions to Decimal.


    //-----------------------------------------------
    // ToDouble
    //-----------------------------------------------

    // This converter does not support conversions to Double.


    //-----------------------------------------------
    // ToInt32
    //-----------------------------------------------

    // This converter does not support conversions to Int32.


    //-----------------------------------------------
    // ToInt64
    //-----------------------------------------------

    // This converter does not support conversions to Int64.


    //-----------------------------------------------
    // ToSingle
    //-----------------------------------------------

    // This converter does not support conversions to Single.


    //-----------------------------------------------
    // ToString
    //-----------------------------------------------

    public override string ToString(DateTime value)
    {
      switch (TypeCode)
      {
        case XmlTypeCode.Date: return DateToString((DateTime)value);
        case XmlTypeCode.Time: return TimeToString((DateTime)value);
        case XmlTypeCode.GDay: return GDayToString((DateTime)value);
        case XmlTypeCode.GMonth: return GMonthToString((DateTime)value);
        case XmlTypeCode.GMonthDay: return GMonthDayToString((DateTime)value);
        case XmlTypeCode.GYear: return GYearToString((DateTime)value);
        case XmlTypeCode.GYearMonth: return GYearMonthToString((DateTime)value);
      }
      return DateTimeToString((DateTime)value);
    }

    public virtual string ToString(DateTimeOffset value)
    {
      switch (TypeCode)
      {
        case XmlTypeCode.Date: return DateOffsetToString((DateTimeOffset)value);
        case XmlTypeCode.Time: return TimeOffsetToString((DateTimeOffset)value);
        case XmlTypeCode.GDay: return GDayOffsetToString((DateTimeOffset)value);
        case XmlTypeCode.GMonth: return GMonthOffsetToString((DateTimeOffset)value);
        case XmlTypeCode.GMonthDay: return GMonthDayOffsetToString((DateTimeOffset)value);
        case XmlTypeCode.GYear: return GYearOffsetToString((DateTimeOffset)value);
        case XmlTypeCode.GYearMonth: return GYearMonthOffsetToString((DateTimeOffset)value);
      }
      return DateTimeOffsetToString((DateTimeOffset)value);
    }

    public override string ToString(object value, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == DateTimeType) return this.ToString((DateTime)value);
      if (sourceType == DateTimeOffsetType) return this.ToString((DateTimeOffset)value);
      if (sourceType == StringType) return ((string)value);
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).Value;

      return (string)ChangeListType(value, StringType, nsResolver);
    }


    //-----------------------------------------------
    // ChangeType
    //-----------------------------------------------

    public override object ChangeType(DateTime value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DateTimeType) return ((DateTime)value);
      if (destinationType == DateTimeOffsetType) return this.ToDateTimeOffset((DateTime)value);
      if (destinationType == StringType) return this.ToString((DateTime)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (DateTime)value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (DateTime)value));

      return ChangeListType(value, destinationType, null);
    }

    public override object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DateTimeType) return this.ToDateTime((string)value);
      if (destinationType == DateTimeOffsetType) return this.ToDateTimeOffset((string)value);
      if (destinationType == StringType) return ((string)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (string)value));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (string)value));

      return ChangeListType(value, destinationType, nsResolver);
    }

    public override object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      Type sourceType = value.GetType();

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == DateTimeType) return this.ToDateTime(value);
      if (destinationType == DateTimeOffsetType) return this.ToDateTimeOffset(value);
      if (destinationType == StringType) return this.ToString(value, nsResolver);
      if (destinationType == XmlAtomicValueType)
      {
        if (sourceType == DateTimeType) return (new XmlAtomicValue(SchemaType, (DateTime)value));
        if (sourceType == DateTimeOffsetType) return (new XmlAtomicValue(SchemaType, (DateTimeOffset)value));
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }
      if (destinationType == XPathItemType)
      {
        if (sourceType == DateTimeType) return (new XmlAtomicValue(SchemaType, (DateTime)value));
        if (sourceType == DateTimeOffsetType) return (new XmlAtomicValue(SchemaType, (DateTimeOffset)value));
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }

      return ChangeListType(value, destinationType, nsResolver);
    }
    #endregion
  }
}
