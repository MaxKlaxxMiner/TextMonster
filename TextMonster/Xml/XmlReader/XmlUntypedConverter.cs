namespace TextMonster.Xml.XmlReader
{
  internal class XmlUntypedConverter : XmlListConverter
  {
    private bool allowListToList;

    protected XmlUntypedConverter()
      : base(DatatypeImplementation.UntypedAtomicType)
    {
    }

    protected XmlUntypedConverter(XmlUntypedConverter atomicConverter, bool allowListToList)
      : base(atomicConverter, allowListToList ? StringArrayType : StringType)
    {
      this.allowListToList = allowListToList;
    }

    public static readonly XmlValueConverter Untyped = new XmlUntypedConverter(new XmlUntypedConverter(), false);
    public static readonly XmlValueConverter UntypedList = new XmlUntypedConverter(new XmlUntypedConverter(), true);

    #region AUTOGENERATED_XMLUNTYPEDCONVERTER

    //-----------------------------------------------
    // ToBoolean
    //-----------------------------------------------

    public override bool ToBoolean(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return XmlConvert.ToBoolean((string)value);
    }
    public override bool ToBoolean(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return XmlConvert.ToBoolean((string)value);

      return (bool)ChangeTypeWildcardDestination(value, BooleanType, null);
    }


    //-----------------------------------------------
    // ToDateTime
    //-----------------------------------------------

    public override DateTime ToDateTime(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return UntypedAtomicToDateTime((string)value);
    }
    public override DateTime ToDateTime(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return UntypedAtomicToDateTime((string)value);

      return (DateTime)ChangeTypeWildcardDestination(value, DateTimeType, null);
    }

    //-----------------------------------------------
    // ToDateTimeOffset
    //-----------------------------------------------

    public override DateTimeOffset ToDateTimeOffset(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return UntypedAtomicToDateTimeOffset((string)value);
    }

    public override DateTimeOffset ToDateTimeOffset(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return UntypedAtomicToDateTimeOffset((string)value);

      return (DateTimeOffset)ChangeTypeWildcardDestination(value, DateTimeOffsetType, null);
    }

    //-----------------------------------------------
    // ToDecimal
    //-----------------------------------------------

    public override decimal ToDecimal(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return XmlConvert.ToDecimal((string)value);
    }
    public override decimal ToDecimal(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return XmlConvert.ToDecimal((string)value);

      return (decimal)ChangeTypeWildcardDestination(value, DecimalType, null);
    }


    //-----------------------------------------------
    // ToDouble
    //-----------------------------------------------

    public override double ToDouble(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return XmlConvert.ToDouble((string)value);
    }
    public override double ToDouble(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return XmlConvert.ToDouble((string)value);

      return (double)ChangeTypeWildcardDestination(value, DoubleType, null);
    }


    //-----------------------------------------------
    // ToInt32
    //-----------------------------------------------

    public override int ToInt32(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return XmlConvert.ToInt32((string)value);
    }
    public override int ToInt32(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return XmlConvert.ToInt32((string)value);

      return (int)ChangeTypeWildcardDestination(value, Int32Type, null);
    }


    //-----------------------------------------------
    // ToInt64
    //-----------------------------------------------

    public override long ToInt64(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return XmlConvert.ToInt64((string)value);
    }
    public override long ToInt64(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return XmlConvert.ToInt64((string)value);

      return (long)ChangeTypeWildcardDestination(value, Int64Type, null);
    }


    //-----------------------------------------------
    // ToSingle
    //-----------------------------------------------

    public override float ToSingle(string value)
    {
      if (value == null) throw new ArgumentNullException("value");

      return XmlConvert.ToSingle((string)value);
    }
    public override float ToSingle(object value)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == StringType) return XmlConvert.ToSingle((string)value);

      return (float)ChangeTypeWildcardDestination(value, SingleType, null);
    }


    //-----------------------------------------------
    // ToString
    //-----------------------------------------------

    public override string ToString(bool value)
    {
      return XmlConvert.ToString((bool)value);
    }
    public override string ToString(DateTime value)
    {
      return DateTimeToString((DateTime)value);
    }
    public override string ToString(DateTimeOffset value)
    {
      return DateTimeOffsetToString((DateTimeOffset)value);
    }
    public override string ToString(decimal value)
    {
      return XmlConvert.ToString((decimal)value);
    }
    public override string ToString(double value)
    {
      return XmlConvert.ToString((double)value);
    }
    public override string ToString(int value)
    {
      return XmlConvert.ToString((int)value);
    }
    public override string ToString(long value)
    {
      return XmlConvert.ToString((long)value);
    }
    public override string ToString(float value)
    {
      return XmlConvert.ToString((float)value);
    }
    public override string ToString(string value, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");

      return ((string)value);
    }
    public override string ToString(object value, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");

      Type sourceType = value.GetType();

      if (sourceType == BooleanType) return XmlConvert.ToString((bool)value);
      if (sourceType == ByteType) return XmlConvert.ToString((byte)value);
      if (sourceType == ByteArrayType) return Base64BinaryToString((byte[])value);
      if (sourceType == DateTimeType) return DateTimeToString((DateTime)value);
      if (sourceType == DateTimeOffsetType) return DateTimeOffsetToString((DateTimeOffset)value);
      if (sourceType == DecimalType) return XmlConvert.ToString((decimal)value);
      if (sourceType == DoubleType) return XmlConvert.ToString((double)value);
      if (sourceType == Int16Type) return XmlConvert.ToString((short)value);
      if (sourceType == Int32Type) return XmlConvert.ToString((int)value);
      if (sourceType == Int64Type) return XmlConvert.ToString((long)value);
      if (sourceType == SByteType) return XmlConvert.ToString((sbyte)value);
      if (sourceType == SingleType) return XmlConvert.ToString((float)value);
      if (sourceType == StringType) return ((string)value);
      if (sourceType == TimeSpanType) return DurationToString((TimeSpan)value);
      if (sourceType == UInt16Type) return XmlConvert.ToString((ushort)value);
      if (sourceType == UInt32Type) return XmlConvert.ToString((uint)value);
      if (sourceType == UInt64Type) return XmlConvert.ToString((ulong)value);
      if (IsDerivedFrom(sourceType, UriType)) return AnyUriToString((Uri)value);
      if (sourceType == XmlAtomicValueType) return ((string)((XmlAtomicValue)value).ValueAs(StringType, nsResolver));
      if (IsDerivedFrom(sourceType, XmlQualifiedNameType)) return QNameToString((XmlQualifiedName)value, nsResolver);

      return (string)ChangeTypeWildcardDestination(value, StringType, nsResolver);
    }


    //-----------------------------------------------
    // ChangeType
    //-----------------------------------------------

    public override object ChangeType(bool value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return XmlConvert.ToString((bool)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(DateTime value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return DateTimeToString((DateTime)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(DateTimeOffset value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return DateTimeOffsetToString((DateTimeOffset)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(decimal value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return XmlConvert.ToString((decimal)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(double value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return XmlConvert.ToString((double)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(int value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return XmlConvert.ToString((int)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(long value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return XmlConvert.ToString((long)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(float value, Type destinationType)
    {
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == StringType) return XmlConvert.ToString((float)value);

      return ChangeTypeWildcardSource(value, destinationType, null);
    }

    public override object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == BooleanType) return XmlConvert.ToBoolean((string)value);
      if (destinationType == ByteType) return Int32ToByte(XmlConvert.ToInt32((string)value));
      if (destinationType == ByteArrayType) return StringToBase64Binary((string)value);
      if (destinationType == DateTimeType) return UntypedAtomicToDateTime((string)value);
      if (destinationType == DateTimeOffsetType) return UntypedAtomicToDateTimeOffset((string)value);
      if (destinationType == DecimalType) return XmlConvert.ToDecimal((string)value);
      if (destinationType == DoubleType) return XmlConvert.ToDouble((string)value);
      if (destinationType == Int16Type) return Int32ToInt16(XmlConvert.ToInt32((string)value));
      if (destinationType == Int32Type) return XmlConvert.ToInt32((string)value);
      if (destinationType == Int64Type) return XmlConvert.ToInt64((string)value);
      if (destinationType == SByteType) return Int32ToSByte(XmlConvert.ToInt32((string)value));
      if (destinationType == SingleType) return XmlConvert.ToSingle((string)value);
      if (destinationType == TimeSpanType) return StringToDuration((string)value);
      if (destinationType == UInt16Type) return Int32ToUInt16(XmlConvert.ToInt32((string)value));
      if (destinationType == UInt32Type) return Int64ToUInt32(XmlConvert.ToInt64((string)value));
      if (destinationType == UInt64Type) return DecimalToUInt64(XmlConvert.ToDecimal((string)value));
      if (destinationType == UriType) return XmlConvert.ToUri((string)value);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, (string)value));
      if (destinationType == XmlQualifiedNameType) return StringToQName((string)value, nsResolver);
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, (string)value));
      if (destinationType == StringType) return ((string)value);

      return ChangeTypeWildcardSource(value, destinationType, nsResolver);
    }

    public override object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (value == null) throw new ArgumentNullException("value");
      if (destinationType == null) throw new ArgumentNullException("destinationType");

      Type sourceType = value.GetType();

      if (destinationType == ObjectType) destinationType = DefaultClrType;
      if (destinationType == BooleanType)
      {
        if (sourceType == StringType) return XmlConvert.ToBoolean((string)value);
      }
      if (destinationType == ByteType)
      {
        if (sourceType == StringType) return Int32ToByte(XmlConvert.ToInt32((string)value));
      }
      if (destinationType == ByteArrayType)
      {
        if (sourceType == StringType) return StringToBase64Binary((string)value);
      }
      if (destinationType == DateTimeType)
      {
        if (sourceType == StringType) return UntypedAtomicToDateTime((string)value);
      }
      if (destinationType == DateTimeOffsetType)
      {
        if (sourceType == StringType) return UntypedAtomicToDateTimeOffset((string)value);
      }
      if (destinationType == DecimalType)
      {
        if (sourceType == StringType) return XmlConvert.ToDecimal((string)value);
      }
      if (destinationType == DoubleType)
      {
        if (sourceType == StringType) return XmlConvert.ToDouble((string)value);
      }
      if (destinationType == Int16Type)
      {
        if (sourceType == StringType) return Int32ToInt16(XmlConvert.ToInt32((string)value));
      }
      if (destinationType == Int32Type)
      {
        if (sourceType == StringType) return XmlConvert.ToInt32((string)value);
      }
      if (destinationType == Int64Type)
      {
        if (sourceType == StringType) return XmlConvert.ToInt64((string)value);
      }
      if (destinationType == SByteType)
      {
        if (sourceType == StringType) return Int32ToSByte(XmlConvert.ToInt32((string)value));
      }
      if (destinationType == SingleType)
      {
        if (sourceType == StringType) return XmlConvert.ToSingle((string)value);
      }
      if (destinationType == TimeSpanType)
      {
        if (sourceType == StringType) return StringToDuration((string)value);
      }
      if (destinationType == UInt16Type)
      {
        if (sourceType == StringType) return Int32ToUInt16(XmlConvert.ToInt32((string)value));
      }
      if (destinationType == UInt32Type)
      {
        if (sourceType == StringType) return Int64ToUInt32(XmlConvert.ToInt64((string)value));
      }
      if (destinationType == UInt64Type)
      {
        if (sourceType == StringType) return DecimalToUInt64(XmlConvert.ToDecimal((string)value));
      }
      if (destinationType == UriType)
      {
        if (sourceType == StringType) return XmlConvert.ToUri((string)value);
      }
      if (destinationType == XmlAtomicValueType)
      {
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }
      if (destinationType == XmlQualifiedNameType)
      {
        if (sourceType == StringType) return StringToQName((string)value, nsResolver);
      }
      if (destinationType == XPathItemType)
      {
        if (sourceType == StringType) return (new XmlAtomicValue(SchemaType, (string)value));
        if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value);
      }
      if (destinationType == StringType) return this.ToString(value, nsResolver);
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, this.ToString(value, nsResolver)));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, this.ToString(value, nsResolver)));
      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAs(destinationType, nsResolver);

      return ChangeListType(value, destinationType, nsResolver);
    }


    //-----------------------------------------------
    // Helpers
    //-----------------------------------------------

    private object ChangeTypeWildcardDestination(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      Type sourceType = value.GetType();

      if (sourceType == XmlAtomicValueType) return ((XmlAtomicValue)value).ValueAs(destinationType, nsResolver);

      return ChangeListType(value, destinationType, nsResolver);
    }
    private object ChangeTypeWildcardSource(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      if (destinationType == XmlAtomicValueType) return (new XmlAtomicValue(SchemaType, this.ToString(value, nsResolver)));
      if (destinationType == XPathItemType) return (new XmlAtomicValue(SchemaType, this.ToString(value, nsResolver)));

      return ChangeListType(value, destinationType, nsResolver);
    }
    #endregion


    //-----------------------------------------------
    // Helpers
    //-----------------------------------------------

    protected override object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver)
    {
      Type sourceType = value.GetType();

      // 1. If there is no nested atomic converter, then do not support lists at all
      // 2. If list to list conversions are not allowed, only allow string => list and list => string
      if ((this.atomicConverter == null) || (!this.allowListToList && sourceType != StringType && destinationType != StringType))
      {
        if (SupportsType(sourceType))
          throw new InvalidCastException(Res.GetString(Res.XmlConvert_TypeToString, XmlTypeName, sourceType.Name));

        if (SupportsType(destinationType))
          throw new InvalidCastException(Res.GetString(Res.XmlConvert_TypeFromString, XmlTypeName, destinationType.Name));

        throw CreateInvalidClrMappingException(sourceType, destinationType);
      }

      return base.ChangeListType(value, destinationType, nsResolver);
    }

    private bool SupportsType(Type clrType)
    {
      if (clrType == BooleanType) return true;
      if (clrType == ByteType) return true;
      if (clrType == ByteArrayType) return true;
      if (clrType == DateTimeType) return true;
      if (clrType == DateTimeOffsetType) return true;
      if (clrType == DecimalType) return true;
      if (clrType == DoubleType) return true;
      if (clrType == Int16Type) return true;
      if (clrType == Int32Type) return true;
      if (clrType == Int64Type) return true;
      if (clrType == SByteType) return true;
      if (clrType == SingleType) return true;
      if (clrType == TimeSpanType) return true;
      if (clrType == UInt16Type) return true;
      if (clrType == UInt32Type) return true;
      if (clrType == UInt64Type) return true;
      if (clrType == UriType) return true;
      if (clrType == XmlQualifiedNameType) return true;

      return false;
    }
  }
}
